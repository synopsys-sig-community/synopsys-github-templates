    name: "coverity-github-template"
    description: "Template for running Coverity in GitHub"

    inputs:
      coverity-url:
        description: "URL to Coverity Connect instance"
        required: true
      coverity-user:
        description: "Coverity Connect user with permission to create streams and commit results"
        required: true
      coverity-passphrase:
        description: "Coverity Connect user password"
        required: true
      build-command:
        description: "Optional build command - if not specified, auto capture will be used"
        required: false
      cov-build-options:
        description: "Optional command line options for cov-build"
        required: false
      cov-analyze-options:
        description: "Optional command line arguments for cov-analyze"
        required: false
      security-gate-view-name:
        description: "Name of saved view in Coverity Connect to use for security gate"
        required: false
      coverity-checker-options:
        description: "Command line arguments to pass to Coverity analysis"
        required: false
      coverity-stream-name:
        description: "Name of Coverity stream"
        required: false
      coverity-project-name:
        description: "Name of Coverity project"
        required: false
      generate-sarif:
        description: "Optional SARIF output step - true or false"
        required: false
      github-token:
        description: "GitHub Access Token"
        required: true
      diagnostic-mode:
        description: "Attach diagnostics to workflow run"
        required: false
      create-stream-and-project:
        description: "Create stream and project - true or false"
        required: false
      coverity-download-url:
        description: "Base URL where to download Coverity bits from"
        required: false
      coverity-download-version:
        description: "Which version of Coverity to download"
        required: false
      coverity-download-creds:
        description: "Credentials used to download Coverity bits"
        required: false
      coverity-license-url:
        description: "Specific URL to download Coverity license from"
        required: false
      coverity-license-creds:
        description: "Credentials used to download Coverity license"
        required: false
      coverity-languages:
        description: "Languages to cov-configure"
        required: false
        default: java javascript jsp jsx kotlin msvc apex clang cs cuda gcc go html nvcc php python ruby scala typescript vb vue

    runs:
      using: "composite"
      steps:

      # Download Coverity bits
      - name: Download Coverity bits
        if: ${{ inputs.coverity-download-url != '' }}
        shell: bash
        run: |
          echo
          echo ========================================================================================
          echo == Download Coverity
          echo ========================================================================================
          echo

          if [ "${{ inputs.coverity-download-version }}" == "" ]; then
            echo Please specify Coverity download version
            exit 1
          fi

          if [ "$RUNNER_OS" == "Linux" ]; then
            COVERITY_ARCH=linux64
          elif [ "$RUNNER_OS" == "macOS" ]; then
            COVERITY_ARCH=macosx
            echo Runner platform $RUNNER_OS not supported
            exit 1
          elif [ "$RUNNER_OS" == "Windows" ]; then
            COVERITY_ARCH=win64
            echo Runner platform $RUNNER_OS not supported
            exit 1
          else
            echo Runner platform $RUNNER_OS not supported
            exit 1
          fi

          # If creds is a GitHub token, attempt to download for a POC
          if [[ "${{ inputs.coverity-download-creds }}" =~ ^ghp_ ]]; then
            unset GITHUB_TOKEN
            echo "${{ inputs.coverity-download-creds }}" | gh auth login --with-token
            echo Download synopsys-github-bits release from GitHub
            echo gh release download -D .. --repo "${{ inputs.coverity-download-url }}" coverity-v${{ inputs.coverity-download-version }}-${COVERITY_ARCH}
            time gh release download -D .. --repo "${{ inputs.coverity-download-url }}" coverity-v${{ inputs.coverity-download-version }}-${COVERITY_ARCH}
            (cd ..; tar --warning=no-unknown-keyword -xzf cov-analysis-${COVERITY_ARCH}-${{ inputs.coverity-download-version }}-ci.tgz)
          else
            COVERITY_BITS_URL="${{ inputs.coverity-download-url }}/cov-analysis-${COVERITY_ARCH}-${{ inputs.coverity-download-version }}.tgz"
            echo Download Coverity from $COVERITY_BITS_URL

            if [ "${{ inputs.coverity-download-creds }}" != "" ]; then
              time (cd ..; curl -L -u "${{ inputs.coverity-download-creds }}" $COVERITY_BITS_URL | tar --warning=no-unknown-keyword -xzf -)
            else
              time (cd ..; curl -L $COVERITY_BITS_URL | tar --warning=no-unknown-keyword -xzf -)
            fi
          fi

          COVERITY_PATH=`pwd`/../cov-analysis-${COVERITY_ARCH}-${{ inputs.coverity-download-version }}/bin
          echo "COVERITY_PATH=$COVERITY_PATH" >> $GITHUB_ENV

          echo Download Coverity license from ${{ inputs.coverity-license-url }}
          if [ "${{ inputs.coverity-license-creds }}" != "" ]; then
            echo exec curl -L -u "${{ inputs.coverity-license-creds }}" ${{ inputs.coverity-license-url }}
            curl -L -u "${{ inputs.coverity-license-creds }}" ${{ inputs.coverity-license-url }} > $COVERITY_PATH/license.dat
            ls -l $COVERITY_PATH/license.dat
          else
            curl -L ${{ inputs.coverity-license-url }} > $COVERITY_PATH/license.dat
            ls -l $COVERITY_PATH/license.dat
          fi
          ls -l $COVERITY_PATH/license.dat

          echo Configure languages ${{ inputs.coverity-languages }}
          for language in ${{ inputs.coverity-languages }}; do
            echo Configure language $language
            $COVERITY_PATH/cov-configure --${language}
          done

      # Initialize a status check to Pending using the third party
      # commit-status-updater action.

      - uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          name: "Coverity Policy Check"

      # Create streams and projects in Coverity Connect if they do not
      # already exist. This allows your workflow to be neutral and not contain
      # any project specific details, which in turn can allow you to on-
      # board new projects simply by installing this template.
      #
      # The project name will be derived from the repository name, e.g.:
      #     project-name
      # The stream name will be derived from the repository name AND the
      # branch name. e.g.:
      #     project-name-branch-name
      #
      # This requires that the user credentials used has permission to create
      # streams.
      #
      # A project is necessary for the security gate to work, as it must
      # reference a project when opening the saved view.

      - name: Create Coverity Stream
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          if [ "${{ inputs.create-stream-and-project }}" == "true" ]; then
            if [ "$COVERITY_PATH" != "" ]; then
              export PATH=$COVERITY_PATH:$PATH
            fi
            echo
            echo ========================================================================================
            echo == Initialize Coverity project and stream
            echo ========================================================================================
            echo
            if [ "${{ inputs.coverity-stream-name }}" == "" ]; then
              export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-${GITHUB_REF##*/}
            else
              export COVERITY_STREAM_NAME=${{ inputs.coverity-stream-name }}
            fi
            if [ "${{ inputs.coverity-project-name }}" == "" ]; then
              export COVERITY_PROJECT_NAME=${GITHUB_REPOSITORY##*/}
            else
              export COVERITY_PROJECT_NAME=${{ inputs.coverity-project-name }}
            fi
            echo Ensure that project "$COVERITY_PROJECT_NAME" exists
            cov-manage-im --url ${{ inputs.coverity-url }} --on-new-cert trust --mode projects --add --set name:"$COVERITY_PROJECT_NAME" || true
            echo Ensure that stream "$COVERITY_STREAM_NAME" exists
            cov-manage-im --url ${{ inputs.coverity-url }} --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
            cov-manage-im --url ${{ inputs.coverity-url }} --on-new-cert trust --mode projects --update --name "$COVERITY_PROJECT_NAME" --insert stream:"$COVERITY_STREAM_NAME" || true
          fi
        env:
          COV_USER: ${{ inputs.coverity-user }}
          COVERITY_PASSPHRASE: ${{ inputs.coverity-passphrase }}

      # Always run either a full build or auto-capture. A partial capture is possible for incremental analysis,
      # but this will impact the results further. For C/C++ and large Java projects however this may be required
      # and is left as an exercise to the reader.
      - name: Coverity Capture
        shell: bash
        run: |
          if [ "$COVERITY_PATH" != "" ]; then
            export PATH=$COVERITY_PATH:$PATH
          fi
          if [ "${{ inputs.build-command }}" == "" ]; then
            echo
            echo ========================================================================================
            echo == Run Coverity AUTO Capture
            echo ========================================================================================
            echo
            cov-capture --dir idir --project-dir .
          else
            echo
            echo ========================================================================================
            echo == Run Coverity BUILD Capture: ${{ inputs.build-command }}
            echo ========================================================================================
            echo
            cov-build --dir idir ${{ inputs.cov-build-options }} ${{ inputs.build-command }}
          fi

      # On pushes to a main branch, run a Full Coverity analysis using auto
      # capture. This will scan the filesystem to determine what kind of
      # project(s) are present and how to capture them for analysis.
      #
      # The results will be committed to the stream specified in the
      # previous step.
      #
      # Results will be saved into coverity-full-results.json for
      # potential processing.

      - name: Coverity Scan (Full analysis)
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          if [ "$COVERITY_PATH" != "" ]; then
            export PATH=$COVERITY_PATH:$PATH
          fi
          echo
          echo ========================================================================================
          echo == Run FULL Coverity analysis for ${GITHUB_REPOSITORY##*/}-${GITHUB_REF##*/}
          echo ========================================================================================
          echo
          if [ "${{ inputs.coverity-stream-name }}" == "" ]; then
            export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-${GITHUB_REF##*/}
          else
            export COVERITY_STREAM_NAME=${{ inputs.coverity-stream-name }}
          fi
          cov-analyze --dir idir --ticker-mode no-spin --strip-path `pwd` ${{ inputs.coverity-checker-options }} ${{ inputs.cov-analyze-options }}
          cov-commit-defects --dir idir --ticker-mode none --url ${{ inputs.coverity-url }} --on-new-cert trust --stream \
              $COVERITY_STREAM_NAME --scm git --description "GitHub Workflow $GITHUB_WORKFLOW for $GITHUB_REPO" --version $GITHUB_SHA
          cov-format-errors --dir idir --json-output-v7 coverity-results.json
        env:
          COV_USER: ${{ inputs.coverity-user }}
          COVERITY_PASSPHRASE: ${{ inputs.coverity-passphrase }}

      # Use the helpful third party Jitterbit Get Changed Files action to
      # determine what files have been added or modified.

      - name: Get Pull Request Changeset
        if: ${{ github.event_name == 'pull_request' }}
        id: changeset
        uses: jitterbit/get-changed-files@v1

      # On a pull request, run an incremental analysis. This uses auto
      # capture as well, and references a stream that was presumably
      # created in advance by a push to this repo, using the stream name
      # based on the repository and main branch name (e.g. "master").
      #
      # This implementation uses a full capture rather than a partial
      # capure, as the partial capture will cause increased variability
      # in the Coverity results compared to full analysis.
      #
      # If maximum speed is desired in favor of complete resulsts, you may
      # add:
      #     --source-list coverity-files-to-scan.txt
      # to the cov-capture invokation.
      #
      # Results are saved into coverity-results.json.

      - name: Coverity Scan (Incremental analysis)
        if: ${{github.event_name == 'pull_request'}}
        shell: bash
        run: |
          if [ "$COVERITY_PATH" != "" ]; then
            export PATH=$COVERITY_PATH:$PATH
          fi
          echo
          echo ========================================================================================
          echo == Run INCREMENTAL Coverity analysis for ${GITHUB_REPOSITORY##*/}-$BASE_BRANCH
          echo ========================================================================================
          echo
          if [ "${{ inputs.coverity-stream-name }}" == "" ]; then
            export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-$BASE_BRANCH
          else
            export COVERITY_STREAM_NAME=${{ inputs.coverity-stream-name }}
          fi
          for changed_file in ${{ steps.changeset.outputs.added_modified }}; do
            echo ${changed_file} >> coverity-files-to-scan.txt
            echo "Scan changed file ${changed_file}."
          done
          cov-run-desktop --dir idir --strip-path `pwd` --url ${{ inputs.coverity-url }} --stream $COVERITY_STREAM_NAME --present-in-reference false \
            --ignore-uncapturable-inputs true \
            --json-output-v7 coverity-results.json \
            ${{ inputs.cov-analyze-options }} \
            ${{ steps.changeset.outputs.added_modified }}
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          COV_USER: ${{ inputs.coverity-user }}
          COVERITY_PASSPHRASE: ${{ inputs.coverity-passphrase }}

      # The coverity-report-output-v7-json action will take the results
      # from Coverity and present them as review feedback on pull request.
      #
      # Only NEW defects will be reported to the user.

      - name: Coverity Pull Request Feedback
        if: ${{github.event_name == 'pull_request'}}
        uses: synopsys-sig/coverity-report-output-v7-json@v0.0.1
        with:
          # The following parameters are REQUIRED
          json-file-path: ./coverity-results.json
          github-token: ${{ inputs.github-token }}
          # If the following optional parameters are specified, the results from the JSON output will be
          # compared to the baseline issues in the specified project, and only NEW issues will be reported
          # in the pull request.
          coverity-url: ${{ inputs.coverity-url }}
          coverity-project-name: ${{ inputs.coverity-project-name }}
          coverity-username: ${{ inputs.coverity-user }}
          coverity-password: ${{ inputs.coverity-passphrase }}

      # Generate SARIF using Coverity's built-in tool. Note that this is not
      # included in the regular Coverity PATH, so the full path must be
      # specified here.
      #
      # This can be used for both pushes and pull requests, but note the
      # GitHub limitation that it is only available for public repos and for
      # if you have a subscription to GitHub Security.

      - name: Export Coverity Results to SARIF
        if: ${{ inputs.generate-sarif == 'true' }}
        shell: bash
        run: |
          if [ "$COVERITY_PATH" != "" ]; then
            export PATH=$COVERITY_PATH:$PATH
          echo
          echo ========================================================================================
          echo == Generate SARIF for Coverity results
          echo ========================================================================================
          echo
          COV_ANALYZE_PATH=`which cov-analyze`
          COVERITY_HOME=`dirname $COV_ANALYZE_PATH`
          node $COVERITY_HOME/../SARIF/cov-format-sarif-for-github.js \
            --inputFile coverity-results.json \
            --repoName $GITHUB_REPOSITORY \
            --checkoutPath $GITHUB_REPOSITORY `pwd` $GITHUB_SHA \
            --outputFile synopsys-coverity-github-sarif.json

      - name: Upload SARIF file
        if: ${{ inputs.generate-sarif == 'true' }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: synopsys-coverity-github-sarif.json

      - name: Coverity Security Gate (Full analysis)
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          if [ "${{ inputs.security-gate-view-name }}" != "" ]; then
            echo
            echo ========================================================================================
            echo == Check security gate for project ${GITHUB_REPOSITORY##*/}: ${{ inputs.security-gate-view-name }}
            echo ========================================================================================
            echo
            if [ "${{ inputs.coverity-project-name }}" == "" ]; then
              export COVERITY_PROJECT_NAME=${GITHUB_REPOSITORY##*/}
            else
              export COVERITY_PROJECT_NAME=${{ inputs.coverity-project-name }}
            fi
            COVERITY_VIEW_ESCAPED=`jq -rn --arg x "${{ inputs.security-gate-view-name }}" '$x|@uri'`
            curl -kfLsS --user $COV_USER:$COVERITY_PASSPHRASE ${{ inputs.coverity-url }}/api/viewContents/issues/v1/$COVERITY_VIEW_ESCAPED?projectId=$COVERITY_PROJECT_NAME > security-gate-results.json
            if [ $(cat security-gate-results.json | jq .viewContentsV1.totalRows) -ne 0 ]; then
              echo Security gate found policy violations
              cat security-gate-results.json | jq .viewContentsV1.rows
              echo "SECURITY_GATE_STATUS=failure" >> $GITHUB_ENV
            else
              echo "SECURITY_GATE_STATUS=success" >> $GITHUB_ENV
            fi
          else
            echo "SECURITY_GATE_STATUS=success" >> $GITHUB_ENV
          fi
        env:
          COV_USER: ${{ inputs.coverity-user }}
          COVERITY_PASSPHRASE: ${{ inputs.coverity-passphrase }}

      # For a pull request, until the GitHub action supports this, we
      # will run a preview commit and check how many newly introduced
      # issues are being reported.

      - name: Coverity Security Gate (Incremental analysis)
        if: ${{github.event_name == 'pull_request'}}
        shell: bash
        run: |
          if [ "$COVERITY_PATH" != "" ]; then
            export PATH=$COVERITY_PATH:$PATH
          fi
          echo
          echo ========================================================================================
          echo == Check security gate for local analysis results
          echo ========================================================================================
          echo
          if [ "${{ inputs.coverity-stream-name }}" == "" ]; then
            export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-$BASE_BRANCH
          else
            export COVERITY_STREAM_NAME=${{ inputs.coverity-stream-name }}
          fi
          cov-commit-defects --dir idir --url ${{ inputs.coverity-url }} --preview-report-v2 preview-report.json --stream ${COVERITY_STREAM_NAME}
          NUM_NEW_DEFECTS=`cat preview-report.json | jq -re .issueInfo[].presentInComparisonSnapshot | grep false | wc -l || true`
          if [ "$NUM_NEW_DEFECTS" -eq 0 ]; then
            echo No new defects found - success
            echo ::save-state name=security_gate_status::success
            echo "SECURITY_GATE_STATUS=success" >> $GITHUB_ENV
          else
            echo New defects found - failure
            echo ::save-state name=security_gate_status::failure
            echo "SECURITY_GATE_STATUS=failure" >> $GITHUB_ENV
          fi
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          COV_USER: ${{ inputs.coverity-user }}
          COVERITY_PASSPHRASE: ${{ inputs.coverity-passphrase }}

      - name: Archive Coverity Intermediate Directory
        if: ${{ inputs.diagnostic-mode == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: coverity-idir
          path: idir

      - uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          name: "Coverity Policy Check"
          status: "${{ env.SECURITY_GATE_STATUS }}"
